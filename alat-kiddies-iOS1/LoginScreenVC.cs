// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using CoreAnimation;
using CoreFoundation;
using CoreGraphics;
using Foundation;
using UIKit;


namespace alat_kiddies_iOS1
{
    public partial class LoginScreenVC : UIViewController
    {
        private const MatrixOrder Order = (MatrixOrder)1;

        public LoginScreenVC(IntPtr handle) : base(handle)
        {
        }

        UIDynamicAnimator animator;
        UIDynamicItemBehavior spinnerBehaviour;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.
            loginBtn.TouchUpInside += LoginBtn_TouchUpInside;
            var taprecognizer = new UITapGestureRecognizer(HidePassword);
            showPasswordImg.UserInteractionEnabled = true;
            showPasswordImg.AddGestureRecognizer(taprecognizer);

        }

        private void LoginBtn_TouchUpInside(object sender, EventArgs e)
        {
            StartAmination();
            bool emailInvalid = ValidationPack.ValidateEmail(emailField.Text);
            bool passwordInvalid = ValidationPack.ValidatePassWord(passwordField.Text);
            if (!(emailInvalid || passwordInvalid))
            {
                errorMsgLabel.Hidden = true;
                StartAmination();
            }
            else
            {
                errorMsgLabel.Hidden = false;
                errorMsgLabel.Text = "Email or password incorrect. Try again";
            }
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();         
        }

        void StartAmination()
        {
            try
            {
                authenticatingView.Hidden = false;
                spinnerBehaviour = new UIDynamicItemBehavior(authSpinImg);
                animator = new UIDynamicAnimator(authenticatingView);
                spinnerBehaviour.AngularResistance = (nfloat)0.0;
                spinnerBehaviour.AddAngularVelocityForItem(8.0f, authSpinImg);
                animator.AddBehavior(spinnerBehaviour);

                
                    UIImageView.Animate(2, 0, options: UIViewAnimationOptions.Repeat | UIViewAnimationOptions.Autoreverse, () =>
                    { alatAuthLogo.Transform = CGAffineTransform.MakeScale((nfloat)0.8, (nfloat)0.8);
                        alatAuthLogo.Transform = CGAffineTransform.MakeScale((nfloat)1, (nfloat)1);
                    }, null);
                
                UIApplication.SharedApplication.BeginIgnoringInteractionEvents();
            }

            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        void StopAnimation()
        {
            animator.RemoveAllBehaviors();
            authenticatingView.Hidden = true;
            UIApplication.SharedApplication.EndIgnoringInteractionEvents();
        }

        public void HidePassword(UITapGestureRecognizer taprecognizer)
        {
            if (showPasswordImg.Image == UIImage.FromBundle("showIcon"))
            {
                passwordField.SecureTextEntry = false;
                showPasswordImg.Image = UIImage.FromBundle("hideIcon");
            }
            else
            {
                passwordField.SecureTextEntry = true;
                showPasswordImg.Image = UIImage.FromBundle("showIcon");
            }

        }
        
    } 
        
}
