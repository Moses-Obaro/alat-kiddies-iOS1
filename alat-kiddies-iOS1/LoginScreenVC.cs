// This file has been autogenerated from a class added in the UI designer.

using System;
//using GlobalToast;
using System.Drawing;
using CoreAnimation;
using CoreFoundation;
using CoreGraphics;
using Foundation;
using UIKit;


namespace alat_kiddies_iOS1
{
    public partial class LoginScreenVC : UIViewController
    {

        public LoginScreenVC(IntPtr handle) : base(handle)
        {
        }

        UIDynamicAnimator animator;
        UIDynamicItemBehavior spinnerBehaviour;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            // Perform any additional setup after loading the view, typically from a nib.
            FieldDesign();
            FieldIcons();

            var defaultEmail = NSUserDefaults.StandardUserDefaults.StringForKey("Email");
            if (defaultEmail != null)
            {
                emailField.Text = defaultEmail;
            }

            var defaultPassWord = NSUserDefaults.StandardUserDefaults.StringForKey("Password");
            if (defaultPassWord != null)
            {
                passwordField.Text = defaultPassWord;
            }           

            loginBtn.TouchUpInside += LoginBtn_TouchUpInside;
            var taprecognizer = new UITapGestureRecognizer(HidePassword);
            showPasswordImg.UserInteractionEnabled = true;
            showPasswordImg.AddGestureRecognizer(taprecognizer);

            NSUserDefaults.StandardUserDefaults.SetString(emailField.Text, "Email");
            NSUserDefaults.StandardUserDefaults.SetString(passwordField.Text, "Password");
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            var defaultEmail = NSUserDefaults.StandardUserDefaults.StringForKey("Email");
            if (defaultEmail != null)
            {
                emailField.Text = defaultEmail;
            }
        }

        private void FieldIcons()
        {
            try
            {
                UIImageView emailIcon = new UIImageView();
                emailIcon.Image = UIImage.FromBundle("emailIcon");

                UIView contentView = new UIView();
                contentView.AddSubview(emailIcon);

                contentView.Frame = new CGRect(0, 0, UIImage.FromBundle("emailIcon").Size.Width + 10, UIImage.FromBundle("emailIcon").Size.Height);
                emailIcon.Frame = new CGRect(10, 0, UIImage.FromBundle("emailIcon").Size.Width, UIImage.FromBundle("emailIcon").Size.Height);

                emailField.LeftView = contentView;
                emailField.LeftViewMode = UITextFieldViewMode.Always;



                // PasswordIcon
                UIImageView passIcon = new UIImageView();
                passIcon.Image = UIImage.FromBundle("passwordIcon");

                UIView contentPassView = new UIView();
                contentPassView.AddSubview(passIcon);

                contentPassView.Frame = new CGRect(0, 0, UIImage.FromBundle("passwordIcon").Size.Width + 10, UIImage.FromBundle("passwordIcon").Size.Height);
                passIcon.Frame = new CGRect(10, 0, UIImage.FromBundle("passwordIcon").Size.Width, UIImage.FromBundle("passwordIcon").Size.Height);

                passwordField.LeftView = contentPassView;
                passwordField.LeftViewMode = UITextFieldViewMode.Always;
            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        private void FieldDesign()
        {
            emailField.Layer.CornerRadius = 20;
            emailField.ClipsToBounds = true;

            passwordField.Layer.CornerRadius = 20;
            passwordField.ClipsToBounds = true;

            loginBtn.Layer.CornerRadius = 20;
        }

        private void LoginBtn_TouchUpInside(object sender, EventArgs e)
        {
            StartAmination();
            try
            {
                bool emailInvalid = ValidationPack.ValidateEmail(emailField.Text);
                bool passwordInvalid = ValidationPack.ValidatePassWord(passwordField.Text);
                if (emailInvalid || passwordInvalid)
                {
                    StopAnimation();
                    errorMsgLabel.Hidden = false;
                    errorMsgLabel.Text = "Email or password incorrect. Try again";
                }
                else
                {
                    errorMsgLabel.Hidden = true;
                    StopAnimation();
                    PerformSegue("GoToParentDashBoard", null);
                }
            }

            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();         
        }

        void StartAmination()
        {
            try
            {
                authenticatingView.Hidden = false;
                spinnerBehaviour = new UIDynamicItemBehavior(authSpinImg);
                animator = new UIDynamicAnimator(authenticatingView);
                spinnerBehaviour.AngularResistance = (nfloat)0.0;
                spinnerBehaviour.AddAngularVelocityForItem(8.0f, authSpinImg);
                animator.AddBehavior(spinnerBehaviour);

                
                    UIImageView.Animate(2, 0, options: UIViewAnimationOptions.Repeat | UIViewAnimationOptions.Autoreverse, () =>
                    { alatAuthLogo.Transform = CGAffineTransform.MakeScale((nfloat)0.8, (nfloat)0.8);
                        alatAuthLogo.Transform = CGAffineTransform.MakeScale((nfloat)1, (nfloat)1);
                    }, null);
                
                UIApplication.SharedApplication.BeginIgnoringInteractionEvents();
            }

            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        void StopAnimation()
        {
            animator.RemoveAllBehaviors();
            authenticatingView.Hidden = true;
            UIApplication.SharedApplication.EndIgnoringInteractionEvents();
        }

        public void HidePassword(UITapGestureRecognizer taprecognizer)
        {
            if (showPasswordImg.Image == UIImage.FromBundle("showIcon"))
            {
                passwordField.SecureTextEntry = false;
                showPasswordImg.Image = UIImage.FromBundle("hideIcon");
            }
            else
            {
                passwordField.SecureTextEntry = true;
                showPasswordImg.Image = UIImage.FromBundle("showIcon");
            }

        }
        
    } 
        
}
